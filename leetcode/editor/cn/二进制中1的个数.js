/**
 * @return {number}
 */
function NumberOf1(n) {
  let count = 0, flag = n;
  while(flag !== 0) {
    flag = flag & (flag - 1);
    count ++;
  }
  return count;
}
/*
如果一个整数不为0，那么这个整数至少有一位是1。
如果我们把这个整数减1，那么原来处在整数最右边的1就会变为0，原来在1后面的所有的0都会变成1。
其余所有位将不会受到影响。
举个例子：一个二进制数1100，从右边数起第三位是处于最右边的一个1。减去1后，得到1011。
减1的结果是把 最右边的一个 1 开始的所有位都 取反 了。
因为 1100 & 1011 = 1000
也就是说，把一个整数减去1，再和原整数做 与 运算，会把该整数最右边一个1变成0。
那么一个整数的二进制有多少个1，就可以进行多少次这样的操作。
 */
